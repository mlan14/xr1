{
  "id": 4157,
  "name": "New Composed Shader",
  "fragment": "#define PI 3.141592653589793238462643383279\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform vec3 color;\nuniform vec2 uvScale;\nuniform float brightness;\nuniform float speed;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvec3 mod289(vec3 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 mod289(vec4 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 permute(vec4 x) \n                                                        {\n                                                            return mod289(((x * 34.0) + 1.0) * x);\n                                                        }\nvec4 taylorInvSqrt(vec4 r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nvec3 fade(vec3 t) \n                                                        {\n                                                            return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n                                                        }\nfloat cnoise(vec3 P) \n                                                        {\n                                                            vec3 Pi0 = floor(P);\n                                                            vec3 Pi1 = Pi0 + vec3(1.0);\n                                                            Pi0 = mod289(Pi0);\n                                                            Pi1 = mod289(Pi1);\n                                                            vec3 Pf0 = fract(P);\n                                                            vec3 Pf1 = Pf0 - vec3(1.0);\n                                                            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n                                                            vec4 iy = vec4(Pi0.yy, Pi1.yy);\n                                                            vec4 iz0 = Pi0.zzzz;\n                                                            vec4 iz1 = Pi1.zzzz;\n                                                            vec4 ixy = permute(permute(ix) + iy);\n                                                            vec4 ixy0 = permute(ixy + iz0);\n                                                            vec4 ixy1 = permute(ixy + iz1);\n                                                            vec4 gx0 = ixy0 * (1.0 / 7.0);\n                                                            vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n                                                            gx0 = fract(gx0);\n                                                            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n                                                            vec4 sz0 = step(gz0, vec4(0.0));\n                                                            gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n                                                            gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n                                                            vec4 gx1 = ixy1 * (1.0 / 7.0);\n                                                            vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n                                                            gx1 = fract(gx1);\n                                                            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n                                                            vec4 sz1 = step(gz1, vec4(0.0));\n                                                            gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n                                                            gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n                                                            vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n                                                            vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n                                                            vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n                                                            vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n                                                            vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n                                                            vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n                                                            vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n                                                            vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n                                                            vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n                                                            g000 *= norm0.x;\n                                                            g010 *= norm0.y;\n                                                            g100 *= norm0.z;\n                                                            g110 *= norm0.w;\n                                                            vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g011, g011)));\n                                                            g001 *= norm1.x;\n                                                            g011 *= norm1.y;\n                                                            g101 *= norm1.z;\n                                                            g111 *= norm1.w;\n                                                            float n000 = dot(g000, Pf0);\n                                                            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n                                                            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n                                                            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n                                                            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n                                                            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n                                                            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n                                                            float n111 = dot(g111, Pf1);\n                                                            vec3 fade_xyz = fade(Pf0);\n                                                            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n                                                            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n                                                            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n                                                            return 2.2 * n_xyz;\n                                                        }\nfloat surface3(vec3 coord) \n                                                        {\n                                                            float frequency = 7.0;\n                                                            float n = 0.4;\n                                                            n -= 1.0 * abs(cnoise(coord * frequency));\n                                                            n -= 1.5 * abs(cnoise(coord * frequency * 4.0));\n                                                            n -= 1.25 * abs(cnoise(coord * frequency * 4.0));\n                                                            return clamp(n, -0.6, 1.0);\n                                                        }\nvec4 Caustic_Improved1579275975003_1561_main(void) \n                                                        {\n                                                            vec4 Caustic_Improved1579275975003_1561_gl_FragColor = vec4(0.0);\n                                                            vec2 uvMax = (2.0 * asin(sin(2.0 * PI * vUv))) / PI;\n                                                            float n = surface3(vec3(uvMax * uvScale, time * speed));\n                                                            vec3 s = vec3(clamp(n, 0.0, 1.0)) * color * brightness;\n                                                            Caustic_Improved1579275975003_1561_gl_FragColor = vec4(s, 1.0);\n                                                            return Caustic_Improved1579275975003_1561_gl_FragColor *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_FragColor = Caustic_Improved1579275975003_1561_main();                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvec4 Caustic_Improved1579275975003_1561_main() \n                                                        {\n                                                            vec4 Caustic_Improved1579275975003_1561_gl_Position = vec4(0.0);\n                                                            vNormal = position * normal;\n                                                            vUv = uv;\n                                                            Caustic_Improved1579275975003_1561_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Caustic_Improved1579275975003_1561_gl_Position *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_Position = Caustic_Improved1579275975003_1561_main();                                                        }\n",
  "uniforms": {
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0.14901960784313725,
        "g": 0.2784313725490196,
        "b": 0.9882352941176471
      },
      "type": "c",
      "glslType": "vec3"
    },
    "uvScale": {
      "value": {
        "x": "0.25",
        "y": "0.25",
        "z": 0
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "brightness": {
      "value": "22",
      "type": "f",
      "glslType": "float"
    },
    "speed": {
      "value": "0.02",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/4157",
  "user": {
    "username": "trufo",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}