{
  "id": 4208,
  "name": "New Composed Shader",
  "fragment": "#define OCTAVES 2\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float scale;\nuniform float Disco_Ball1582054256411_343_speed;\nuniform float brightness;\nuniform float sunSpots;\nuniform vec3 Surface_of_The_Sun1582054285362_365_color;\nuniform vec2 Surface_of_The_Sun1582054285362_365_speed;\nuniform vec2 Surface_of_The_Sun1582054285362_365_resolution;\nuniform vec3 Caustic_Perlin1582054340067_411_color;\nuniform float Caustic_Perlin1582054340067_411_resolution;\nuniform float Caustic_Perlin1582054340067_411_speed;\nvec2 position;\nvarying vec3 Disco_Ball1582054256411_343_vNormal;\nvarying vec2 Disco_Ball1582054256411_343_vUv;\nfloat Disco_Ball1582054256411_343_rand(in vec2 p) \n                                                        {\n                                                            return abs(fract(sin(p.x * 95325.328 + p.y * -48674.077) + cos(p.x * -46738.322 + p.y * 76485.077) + time * Disco_Ball1582054256411_343_speed) - .5) + .5;\n                                                        }\nvarying vec2 Surface_of_The_Sun1582054285362_365_vUv;\nfloat Surface_of_The_Sun1582054285362_365_rand(vec2 n) \n                                                        {\n                                                            return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);\n                                                        }\nfloat noise(vec2 n) \n                                                        {\n                                                            const vec2 d = vec2(0.0, 1.0);\n                                                            vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n                                                            return mix(mix(Surface_of_The_Sun1582054285362_365_rand(b), Surface_of_The_Sun1582054285362_365_rand(b + d.yx), f.x), mix(Surface_of_The_Sun1582054285362_365_rand(b + d.xy), Surface_of_The_Sun1582054285362_365_rand(b + d.yy), f.x), f.y);\n                                                        }\nfloat fbm(vec2 n) \n                                                        {\n                                                            float total = 0.0;\n                                                            float amplitude = 2.0;\n                                                            for (int i = 0;\n i < OCTAVES; i++) \n                                                            {\n                                                                total += noise(n) * amplitude;\n                                                                n += n;\n                                                                amplitude *= 0.3;\n                                                            }\n                                                            return total;\n                                                        }\nvec3 tex(vec2 pos) \n                                                        {\n                                                            vec3 c1 = (1.0 - sunSpots) * vec3(3.1, 0.0, 0.0);\n                                                            vec3 c2 = vec3(c1);\n                                                            vec3 c3 = vec3(c1);\n                                                            vec3 c4 = vec3(3.0, 0.9, 0.0) * Surface_of_The_Sun1582054285362_365_color;\n                                                            vec3 c5 = vec3(c3);\n                                                            vec3 c6 = vec3(c1);\n                                                            vec2 p = pos;\n                                                            float q = fbm(p + time * Surface_of_The_Sun1582054285362_365_speed);\n                                                            vec2 r = vec2(fbm(p + q + (time * Surface_of_The_Sun1582054285362_365_speed.x) - p.x - p.y), fbm(p + p + (time * Surface_of_The_Sun1582054285362_365_speed.y)));\n                                                            vec3 c = Surface_of_The_Sun1582054285362_365_color * (mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y));\n                                                            return c;\n                                                        }\nvarying vec2 Caustic_Perlin1582054340067_411_vUv;\nvarying vec3 Caustic_Perlin1582054340067_411_vPosition;\nvarying vec3 Caustic_Perlin1582054340067_411_vNormal;\nvec3 mod289(vec3 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 mod289(vec4 x) \n                                                        {\n                                                            return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                        }\nvec4 permute(vec4 x) \n                                                        {\n                                                            return mod289(((x * 34.0) + 1.0) * x);\n                                                        }\nvec4 taylorInvSqrt(vec4 r) \n                                                        {\n                                                            return 1.79284291400159 - 0.85373472095314 * r;\n                                                        }\nfloat snoise(vec3 v) \n                                                        {\n                                                            const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n                                                            const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n                                                            vec3 i = floor(v + dot(v, C.yyy));\n                                                            vec3 x0 = v - i + dot(i, C.xxx);\n                                                            vec3 g = step(x0.yzx, x0.xyz);\n                                                            vec3 l = 1.0 - g;\n                                                            vec3 i1 = min(g.xyz, l.zxy);\n                                                            vec3 i2 = max(g.xyz, l.zxy);\n                                                            vec3 x1 = x0 - i1 + C.xxx;\n                                                            vec3 x2 = x0 - i2 + C.yyy;\n                                                            vec3 x3 = x0 - D.yyy;\n                                                            i = mod289(i);\n                                                            vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n                                                            float n_ = 0.142857142857;\n                                                            vec3 ns = n_ * D.wyz - D.xzx;\n                                                            vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n                                                            vec4 x_ = floor(j * ns.z);\n                                                            vec4 y_ = floor(j - 7.0 * x_);\n                                                            vec4 x = x_ * ns.x + ns.yyyy;\n                                                            vec4 y = y_ * ns.x + ns.yyyy;\n                                                            vec4 h = 1.0 - abs(x) - abs(y);\n                                                            vec4 b0 = vec4(x.xy, y.xy);\n                                                            vec4 b1 = vec4(x.zw, y.zw);\n                                                            vec4 s0 = floor(b0) * 2.0 + 1.0;\n                                                            vec4 s1 = floor(b1) * 2.0 + 1.0;\n                                                            vec4 sh = -step(h, vec4(0.0));\n                                                            vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n                                                            vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n                                                            vec3 p0 = vec3(a0.xy, h.x);\n                                                            vec3 p1 = vec3(a0.zw, h.y);\n                                                            vec3 p2 = vec3(a1.xy, h.z);\n                                                            vec3 p3 = vec3(a1.zw, h.w);\n                                                            vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n                                                            p0 *= norm.x;\n                                                            p1 *= norm.y;\n                                                            p2 *= norm.z;\n                                                            p3 *= norm.w;\n                                                            vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n                                                            m = m * m;\n                                                            return clamp(42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3))), 0.0, 1.0);\n                                                        }\nvec4 Disco_Ball1582054256411_343_main(void) \n                                                        {\n                                                            vec4 Disco_Ball1582054256411_343_gl_FragColor = vec4(0.0);\n                                                            vec2 position = (Disco_Ball1582054256411_343_vUv.xy) * scale;\n                                                            vec3 color = vec3(Disco_Ball1582054256411_343_rand(vec2(floor(position.x), floor(position.y))), Disco_Ball1582054256411_343_rand(vec2(floor(position.x), floor(position.x))), Disco_Ball1582054256411_343_rand(vec2(floor(position.x * .5), floor(position.y * .5))));\n                                                            float scale = 1. - pow(pow((mod(position.x, 1.) - .5), 2.) + pow((mod(position.y, 1.) - .5), 2.), .7);\n                                                            Disco_Ball1582054256411_343_gl_FragColor = vec4(color * scale, 1.);\n                                                            return Disco_Ball1582054256411_343_gl_FragColor *= 1.0;\n                                                        }\nvec4 Surface_of_The_Sun1582054285362_365_main() \n                                                        {\n                                                            vec4 Surface_of_The_Sun1582054285362_365_gl_FragColor = vec4(0.0);\n                                                            vec2 p = (Surface_of_The_Sun1582054285362_365_vUv - 0.5) * Surface_of_The_Sun1582054285362_365_resolution;\n                                                            vec3 col = tex(p);\n                                                            Surface_of_The_Sun1582054285362_365_gl_FragColor = vec4(col * brightness, 1.0);\n                                                            return Surface_of_The_Sun1582054285362_365_gl_FragColor *= 1.0;\n                                                        }\nvec4 Caustic_Perlin1582054340067_411_main(void) \n                                                        {\n                                                            vec4 Caustic_Perlin1582054340067_411_gl_FragColor = vec4(0.0);\n                                                            position = Caustic_Perlin1582054340067_411_vUv * Caustic_Perlin1582054340067_411_resolution;\n                                                            vec3 c = vec3(0.0);\n                                                            c += Caustic_Perlin1582054340067_411_color * snoise(vec3(position, time * Caustic_Perlin1582054340067_411_speed));\n                                                            Caustic_Perlin1582054340067_411_gl_FragColor = vec4(c, 1.0);\n                                                            return Caustic_Perlin1582054340067_411_gl_FragColor *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_FragColor = (Disco_Ball1582054256411_343_main() + Surface_of_The_Sun1582054285362_365_main() + Caustic_Perlin1582054340067_411_main());                                                        }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Disco_Ball1582054256411_343_vUv;\nvarying vec3 Disco_Ball1582054256411_343_vNormal;\nvarying vec3 Surface_of_The_Sun1582054285362_365_vPosition;\nvarying vec3 Surface_of_The_Sun1582054285362_365_vNormal;\nvarying vec2 Surface_of_The_Sun1582054285362_365_vUv;\nvarying vec2 vUv2;\nvarying vec2 Caustic_Perlin1582054340067_411_vUv;\nvarying vec3 Caustic_Perlin1582054340067_411_vPosition;\nvarying vec3 Caustic_Perlin1582054340067_411_vNormal;\nvec4 Disco_Ball1582054256411_343_main() \n                                                        {\n                                                            vec4 Disco_Ball1582054256411_343_gl_Position = vec4(0.0);\n                                                            Disco_Ball1582054256411_343_vNormal = normal;\n                                                            Disco_Ball1582054256411_343_vUv = uv;\n                                                            Disco_Ball1582054256411_343_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Disco_Ball1582054256411_343_gl_Position *= 1.0;\n                                                        }\nvec4 Surface_of_The_Sun1582054285362_365_main() \n                                                        {\n                                                            vec4 Surface_of_The_Sun1582054285362_365_gl_Position = vec4(0.0);\n                                                            Surface_of_The_Sun1582054285362_365_vNormal = normal;\n                                                            Surface_of_The_Sun1582054285362_365_vUv = uv;\n                                                            vUv2 = uv2;\n                                                            Surface_of_The_Sun1582054285362_365_vPosition = position;\n                                                            Surface_of_The_Sun1582054285362_365_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Surface_of_The_Sun1582054285362_365_gl_Position *= 1.0;\n                                                        }\nvec4 Caustic_Perlin1582054340067_411_main() \n                                                        {\n                                                            vec4 Caustic_Perlin1582054340067_411_gl_Position = vec4(0.0);\n                                                            Caustic_Perlin1582054340067_411_vUv = uv;\n                                                            Caustic_Perlin1582054340067_411_vPosition = position;\n                                                            Caustic_Perlin1582054340067_411_vNormal = normal;\n                                                            Caustic_Perlin1582054340067_411_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                            return Caustic_Perlin1582054340067_411_gl_Position *= 1.0;\n                                                        }\nvoid main() \n                                                        {\n                                                            gl_Position = Disco_Ball1582054256411_343_main() + Surface_of_The_Sun1582054285362_365_main() + Caustic_Perlin1582054340067_411_main();                                                        }\n",
  "uniforms": {
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "scale": {
      "value": "30",
      "type": "f",
      "glslType": "float"
    },
    "Disco_Ball1582054256411_343_speed": {
      "value": "5",
      "type": "f",
      "glslType": "float"
    },
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "brightness": {
      "value": "0.1026031",
      "type": "f",
      "glslType": "float"
    },
    "sunSpots": {
      "value": "1",
      "type": "f",
      "glslType": "float"
    },
    "Surface_of_The_Sun1582054285362_365_speed": {
      "value": {
        "x": 5,
        "y": 0.46153846153846156
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Surface_of_The_Sun1582054285362_365_color": {
      "value": {
        "r": 1,
        "g": 0.22745098039215686,
        "b": 0
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Surface_of_The_Sun1582054285362_365_resolution": {
      "value": {
        "x": "100",
        "y": "100"
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "Caustic_Perlin1582054340067_411_color": {
      "value": {
        "r": 1,
        "g": 1,
        "b": 1
      },
      "type": "c",
      "glslType": "vec3"
    },
    "Caustic_Perlin1582054340067_411_resolution": {
      "value": "4",
      "type": "f",
      "glslType": "float"
    },
    "Caustic_Perlin1582054340067_411_speed": {
      "value": "5",
      "type": "f",
      "glslType": "float"
    }
  },
  "url": "http://shaderfrog.com/app/view/4208",
  "user": {
    "username": "mhellar",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}